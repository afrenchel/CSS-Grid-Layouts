.container {
  background-color: #eee;
  width: 1000px;
  margin: 30px auto;

  display: grid;
  //creating tracks//
  grid-template-rows: repeat(2, 150px);
  // grid-template-columns: repeat(2, 150px) 1fr;//
  // grid-template-columns: repeat(3, 1fr); 1 fractional unit takes the avialable space//
  // grid-template-columns: 50% 1fr 1fr; if you put in procentage it doesn't take the gap in consideration//
  grid-template-columns: repeat(3, 1fr);
  //row-gap: 30px;column-gap: 30px;//
  gap: 30px;

  .item {
    padding: 20px;
    font-size: 30px;
    font-family: sans-serif;
    color: white;

    //elements can be spanned
    //grid-column: 2/ span 2

    &--1 {
      background-color: orangered;

      //grid-row-start: 2;
      //grid-row-end: 3;
      //grid-column-start: 2;
      //grid-column-end: 3;

      grid-row: 2/3;
      grid-column: 2/3;
    }
    &--2 {
      background-color: greenyellow;
      grid-column: 2/ -1;
      //2/ -1 sa se extinda de la coloana 2 pana la sfarsit. -1 inseamna the end.
    }
    &--3 {
      background-color: blueviolet;
      grid-column: 1/3;
      grid-row: 2/3;
    }
    &--4 {
      background-color: palevioletred;
    }
    &--5 {
      background-color: royalblue;

      grid-row: 1/2;
      grid-column: 3/4;

      //grid-area: 1 /3 /2 /4; varianta scurta dar mai clar e cu cea de mai sus cu grid-row si grid-c
    }
    &--6 {
      background-color: goldenrod;

      grid-row: 1/2;
      grid-column: 2/3;
    }
  }
}

//Grid Challenge

.container-challenge {
  background-color: #eee;
  width: 1000px;
  margin: 30px auto;
  display: grid;
  grid-template-columns: repeat(3, 230px) 190px;
  grid-template-rows: repeat(8, 100px);
  gap: 40px;

  //Jonas code for challenge

  //grid-template-rows: 100px 200px 400px 100px;
  //grid-template-columns: repeat(3, 1fr) 200px;
  //grid-gap: 30px;
  //Jonas code for challenge
  // & > * {
  // background-color: brown;
  // padding: 20px;
  // color: white;
  // font-size: 30px;
  // font-family: sans-serif;

  //.header {grid-column: 1/ -1;}
  //small boxes are already where they should be
  //sidebar {grid-column: 4/5; grid-row:2/ span 2;}
  //main-content {grid-column:1/ span 3}
  //footer {grid-column: 1/ -1}
}

.box {
  background-color: palevioletred;
  color: white;
  font-size: 30px;

  &--1 {
    grid-row: 1/2;
    grid-column: 1/5;
  }

  &--2 {
    grid-row: 2/4;
    grid-column: 1/2;
  }
  &--3 {
    grid-row: 2/4;
    grid-column: 2/3;
  }
  &--4 {
    grid-row: 2/4;
    grid-column: 3/4;
  }
  &--5 {
    grid-row: 4/8;
    grid-column: 1/4;
  }
  &--6 {
    grid-row: 2/8;
  }
  &--7 {
    grid-row: 8/9;
    grid-column: 1/5;
  }
}

//Naming grid lines for more complex layouts

//we can name the grid lines in the start in [] and instead of using number to position we use names/
//example:

// grid-template-row: [header-start] 100px [header-end box-start] 200px [box-end main-start] 400px [main-end footer-start] 100px [footer-end];
//grid-template-columns: repeat(3, [col-start] 1fr [col-end]) 200px [grid-end];
//example: header { grid-column: col-start 1/ grid-end;

//Naming grid areas grid-area-template//

/*.container-challenge {

    background-color: #eee;
    width: 1000px;
    margin: 30px auto;
    display: grid;
    grid-template-rows: 100px 200px 400px 100px;
    grid-template-columns: repeat(3, 1fr) 200px;
    gap: 40px;

    grid-template-areas:"head head head head"
                        "box box . side"
                        "main main main side"
                        "foot foot foot foot";

                        //if you want to leave a blank space put a .
                        //for a small simple layout is recommended  to use grid-template-areas

     & > * {
        background-color: brown;
        padding: 20px;
        color: white;
        font-size: 30px;
        font-family: sans-serif;
     }
       .header {
        grid-area: head; 
       }
       .sidebar {
        grid-area: side;
       }
       .main {
        grid-area: main;
       }
       .footer {
        grid-area: foot;
       }

       */

.container-project {
  width: 1000px;
  margin: 30px auto;
  background-color: palegoldenrod;
  display: grid;
  grid-template-rows: repeat(2, 150px);
  grid-template-columns: repeat(2, 1fr);
  gap: 30px;
  grid-auto-flow: row; // grid-auto-flow: row dense; in case we have gaps due to the algorithm
  grid-auto-rows: 80px;
  //align-items is set by default to strech  /end/center/start
  //justify-items is set by default to strech /end/center/start
  align-items: center; //aligns the items across the column axis Y
  justify-items: center; //alligns the items across the row axis X
  //explicit grid that we defined
  //implicit grid css added more rows to fit the content
  //grid-auto-rows we define the proprety
  //grid-auto-flow: column;
  //grid-auto-flow: is automatically set to row, we can change to column
  //grid-auto-columns: .5fr;

  .item {
    padding: 10px;
    color: white;
    font-family: sans-serif;
    font-size: 30px;
    background-color: darkmagenta;

    &--4 {
      background-color: coral;
      grid-row: 2 / span 3;
      align-self: start; //vertically alligned in the cell at the start-overrides the settings from the container
      justify-self: start; //horizaontally alligned in the cell at the start-overrides the settings from the container
    }
    &--7 {
      background-color: palegreen;
      grid-column: 1/ -1;
    }
  }
}

//Align grid tracks to grid container

.container-project-2 {
  width: 1000px;
  margin: 30px auto;
  background-color: palegoldenrod;
  display: grid;
  grid-template-rows: repeat(2, 100px);
  grid-template-columns: repeat(2, 200px);
  gap: 30px;

  justify-content: center; //start/end/space between/space-around/space-evenly horizaontally
  align-content: center; //start/end/space between/space-around/space-evenly vertically

  .div-test {
    padding: 10px;
    color: white;
    font-family: sans-serif;
    font-size: 30px;
    background-color: darkmagenta;
  }
}

.container-advanced {
  width: 1000px;
  margin: 30px auto;
  background-color: bisque;

  //Using min-content and max-content
  //grid-template-rows: repeat(2, 150px);
  //grid-template-rows: repeat(2, min-content);
  //grid-template-columns: max-content 1fr 1fr min-content;

  //MINMAX function
  //grid-template-rows: repeat(2, minmax(150px, min-content));
  //grid-template-columns: minmax(200px, 300px) repeat(3, 1fr);

  //Using the auto-fill and auto-fit
  display: grid;
  grid-template-rows: repeat(2, minmax(150px, min-content));
  grid-template-columns: repeat(auto-fill, 100px); //creates 10 column
  grid-template-columns: repeat(
    auto-fit,
    minmax(100px, 1fr)
  ); //creates 10 columns but for the extra 2 give them the width of zero
  //we can use min-max with auto-fit and we can get a responsive layout without media query
  grid-auto-rows: 150px;
  .item {
    padding: 10px;
    color: white;
    font-size: 30px;
    background-color: brown;

    &--1 {
      background-color: orangered;
    }
    &--2 {
      background-color: yellowgreen;
    }
    &--3 {
      background-color: blueviolet;
    }
    &--4 {
      background-color: palevioletred;
    }
    &--5 {
      background-color: royalblue;
    }
    &--6 {
      background-color: goldenrod;
    }
    &--7 {
      background-color: crimson;
    }
    &--8 {
      background-color: lime;
    }
  }
}
.pula {
  background-color: aquamarine;
  display: flex;
  .item {
    padding: 10px;
    color: white;
    font-size: 30px;
    background-color: brown;

    &--1 {
      background-color: orangered;
    }
    &--2 {
      background-color: yellowgreen;
    }
    &--3 {
      background-color: blueviolet;
    }
    &--4 {
      background-color: palevioletred;
    }
    &--5 {
      background-color: royalblue;
    }
    &--6 {
      background-color: goldenrod;
    }
    &--7 {
      background-color: crimson;
    }
    &--8 {
      background-color: darkslategrey;
    }
  }
}
